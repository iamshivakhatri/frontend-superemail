// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type
  email          String           @unique // User's email, should also be unique
  name           String? // User's full name (optional if you want to store it)
  profilePic     String? // URL to the user's profile picture (optional)
  createdAt      DateTime         @default(now()) // Timestamp of when the user was created
  updatedAt      DateTime         @updatedAt // Automatically update timestamp whenever data changes
  campaigns      Campaign[] // One user can have many campaigns
  DeviceTracking DeviceTracking[]
  campaignTracking CampaignTracking[]
}

model Audiencefile {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId // MongoDB's ObjectId type
  audienceName  String[] // Array of audience names
  audienceEmail String[] // Array of audience emails
  campaigns     Campaign[] // One audience file can be targeted by multiple campaigns
}

model Campaign {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  campaignName      String // Name of the campaign
  campaignType      String // Type of the campaign (e.g., Email, SMS, etc.)
  emailTemplate     String? // Email template used for the campaign (optional)
  subject           String // Subject of the campaign email
  emailBody         String // Body content of the campaign email
  sendDate           DateTime? // End date of the campaign (optional)

  userId         String @db.ObjectId // Foreign key to the User model
  audiencefileId String @db.ObjectId // Foreign key to the Audiencefile model
  // deviceTrackingId String @db.ObjectId @unique // Foreign key to the DeviceTracking model

  createdAt DateTime @default(now()) // Timestamp when the campaign was created
  updatedAt DateTime @updatedAt // Automatically update timestamp whenever data changes

  // Tracking Fields
  sent      Int? // Number of emails sent
  delivered Int? // Number of emails delivered
  opened    Int? // Number of emails opened
  clicked   Int? // Number of clicks on the campaign emails

    // New field for tracking unique opened recipients

  openedRecipients String[]



  // Relations
  user           User             @relation(fields: [userId], references: [id]) // Relation to User
  audiencefile   Audiencefile     @relation(fields: [audiencefileId], references: [id]) // Relation to Audiencefile
  deviceTracking    DeviceTracking?  @relation // Optional relation to DeviceTracking (exactly one per campaign)
  campaignTracking CampaignTracking? // A campaign can have multiple CampaignTracking entries (one per user)


  // devicetracking DeviceTracking  @relation(fields: [deviceTrackingId], references: [id]) // Relation to DeviceTracking
}

model DeviceTracking {
  id         String @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for each device tracking event
  userId     String @db.ObjectId // Foreign key to the User model
  campaignId String @db.ObjectId @unique// Foreign key to the Campaign model


  // Device types
  smartphone    Int? // Number of times opened on a smartphone
  desktopLaptop Int? // Number of times opened on a desktop or laptop
  tablet        Int? // Number of times opened on a tablet
  smartwatch    Int? // Number of times opened on a smartwatch

  campaignType String // Type of the campaign (e.g., Email, SMS, etc.)

  createdAt DateTime @default(now()) // Timestamp for when the tracking entry was created

  // Relations
  user     User     @relation(fields: [userId], references: [id]) // Relation to User
  campaign Campaign @relation(fields: [campaignId], references: [id]) // Relation to Campaign
}

model CampaignTracking {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // Unique identifier for the CampaignTracking entry
  trackingIds String[] // Array of tracking IDs for individual emails sent in the campaign

  campaignId  String   @db.ObjectId @unique // Foreign key to the Campaign model (one-to-one relation)
  userId      String   @db.ObjectId // Foreign key to the User model

  createdAt DateTime @default(now()) // Timestamp for when this entry was created

  // Relations
  campaign Campaign @relation(fields: [campaignId], references: [id]) // One-to-one relation with Campaign
  user     User     @relation(fields: [userId], references: [id])     // Many-to-one relation with User
}